~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Erik Bannasch Transportation Application
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Documentation of project:

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!


IMPORTANT NOTE: Problems with datageneration can occur if no Neo4j Enterprise 3.1 or higher is used since only
Neo4j enterprise supports the @Required annotation!

Source: https://neo4j.com/docs/ogm-manual/current/reference/ - 3.5.4 Existance constraints

For example trying to insert data with null fields will succeed (insert empty data) into the Neo4J Database
if no such version is used, which can cause tests to fail or damage in productive usage!


!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
________________________________________________________________________________________________________________________
application:
-Contains the only application (main).
________________________________________________________________________________________________________________________
businesslogic package:
-Contains all the services which process the requests from the restservice.
-Contains the businesslogic.
-Only package (except for testing) where repository access is granted/available.
________________________________________________________________________________________________________________________
calculation package:
-Contains all pathfinding calculation related classes, since it's so massive that it deserves it's own package.
________________________________________________________________________________________________________________________
dto package:
Contains all data transfer objects (DTO's).
________________________________________________________________________________________________________________________
entities package:
-Contains all entity classes (which are mostly free from logic).
-Has an abstract class, which some entities extend for generic purposes.
-Relations folder is only for structuring (if relationship entities are getting involved).
-entities/nodes/shared package contains shared Interfaces/Classes which are used from multiple nodes.
________________________________________________________________________________________________________________________
enum package:
-Contains enums.
________________________________________________________________________________________________________________________
exceptions package:
-Contains some Exceptions for additional information.
________________________________________________________________________________________________________________________
generator package:
-Contains the DTO generator, which is responsible for generating most of the DTO objects.
-Contains generator classes for all entities.
Reason for this is, to have cleaner code and a better overview. Classes should be generated by those generator classes
(which are basically builders).
________________________________________________________________________________________________________________________
repository package:
-The repository package contains all necessary repositories to access the neo4j DB.
________________________________________________________________________________________________________________________
restservice package:
All API calls return a Response with generated/changed Entities as default.
The reason for this is:
- easier testing
- client can get information for further processing right after making any operations on the database.
________________________________________________________________________________________________________________________
entities/nodes/shared package:
-Contains shared Interfaces/Classes which are used from multiple nodes.
________________________________________________________________________________________________________________________
resources package:
-Contains all necessary properties for the project to run
________________________________________________________________________________________________________________________
test package:
-Contains tests for all restControllers, but also tests the services (businesslogic).
________________________________________________________________________________________________________________________
testObjectGenerators:
-Contains a single simple generator, which is only used to generate test data.
________________________________________________________________________________________________________________________
BaseTest:
-Is an abstract class which all tests extend for utility purposes
(no need for setup/delete functionality on every class).